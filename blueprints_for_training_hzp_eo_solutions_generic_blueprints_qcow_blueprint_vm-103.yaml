tosca_definitions_version: nativeedge_1_0
description: QCOW Generic Blueprint

imports:
  - nativeedge/types/types.yaml
  - vm/inputs.yaml
  - vm/outputs.yaml
  - vm/blueprint.yaml
  - plugin:nativeedge-fabric-plugin
  - plugin:nativeedge-utilities-plugin
  - plugin:nativeedge-plugin
labels:

  csys-obj-type:
    values:
      - environment
blueprint_labels:

  env:
    values:
      - NED

inputs:

  artifact_configuration_secret_name:
    display_label: Artifact Configuration Secret Name
    description: >
      Name of secret with details needed for binary image and artifacts download
    type: secret_key

  binary_image_artifact_url:
    display_label: External repo URL of the binary image
    description: External repo URL of the binary image
    hidden: true
    type: string
    default: { get_secret: [{get_input: artifact_configuration_secret_name}, "binary_image_artifact_url"] }

  binary_image_version:
    display_label: VM Image Version
    description: Version of the VM Image that will be used to create the VM
    hidden: true
    type: string
    default: { get_secret: [{get_input: artifact_configuration_secret_name}, "binary_image_version"] }

  binary_image_artifact_username:
    description: External repo username for binary download
    display_label: External repo username
    type: string
    hidden: true
    required: false
    default: { get_secret: [{get_input: artifact_configuration_secret_name}, "binary_image_access_user"] }

  binary_image_access_token:
    description: External repo access token
    display_label: External repo access token for binary download
    hidden: true
    default: { get_secret: [{get_input: artifact_configuration_secret_name}, "binary_image_access_token"] }
    required: false

  vm_user_name:
    type: string
    display_label: VM User Name
    description: Name of the user to be configured on the VM
    required: true
    default: vm_user

  key_public_secret_name:
    type: secret_key
    display_label: VM SSH Public Key Secret Name
    description: Name of the secret storing SSH public key for the VM

  key_private_secret_name:
    type: secret_key
    display_label: VM SSH Private Key Secret Name
    description: Name of the secret storing SSH private key for the VM

  name:
    type: string
    display_label: VM Name
    description: VM name

  os_type:
    type: string
    display_label: OS Type
    description: Type of OS running on a VM
    constraints:
      - valid_values:
          - UBUNTU16.04-32B
          - UBUNTU16.04-64B
          - UBUNTU18.04
          - UBUNTU20.04
          - UBUNTU20.10
          - UBUNTU21.04
          - UBUNTU21.10
          - UBUNTU22.04
          - UBUNTU22.10
          - UBUNTU23.04
          - CENTOS9
          - CENTOS8
          - DEB-LINUX12-32B
          - DEB-LINUX12-64B
          - DEB-LINUX11-32B
          - DEB-LINUX11-64B
          - DEB-LINUX10-32B
          - DEB-LINUX10-64B
          - FREEBSD13-32B
          - FREEBSD13-64B
          - FREEBSD12-32B
          - FREEBSD12-64B
          - FREEBSD11-32B
          - FREEBSD11-64B
          - ORCL-LINUX9
          - ORCL-LINUX8
          - RHEL9
          - RHEL8
          - SUSE-SLES15
          - SUSE-SLED15
          - SUSE-SLES12
          - SUSE-SLED12
          - LINUX-OTHERS
          - OTHERS

  cpu:
    type: integer
    display_label: vCPUs
    description: Number of CPUs
    default: 2

  memory:
    type: string
    display_label: Memory Size
    description: Memory with unit [KB,MB,GB,TB,PB,EB,ZB,YB]
    default: 2GB

  storage:
    type: string
    display_label: Storage Size
    description: Storage size with unit [KB,MB,GB,TB,PB,EB,ZB,YB]
    default: 4GB

  disk:
    type: string
    display_label: Disk Path
    description: >
      Deployment datastore path on target ECE. Available datastores can be retrieved from inventory service
    default: /DataStore0

  hardware_options.vTPM:
    type: boolean
    hidden: true
    display_label: Hardware Options - vTPM
    description: >
      Enable vTPM. Required for Win11 OS, optional for other OS
    default: false
    required: false

  hardware_options.secure_boot:
    type: boolean
    hidden: true
    display_label: Hardware Options - Secure Boot
    description: >
      Enable secure boot. Required for Win11 OS, optional for other OS
    default: false
    required: false

  hardware_options.firmware_type:
    type: string
    hidden: true
    display_label: Hardware Options - Firmware Type
    description: Firmware type. For Win11 OS, it must be UEFI
    default: BIOS
    required: false
    constraints:
      - valid_values:
          - BIOS
          - UEFI

  enable_management:
    type: boolean
    display_label: Enable Management
    description: >
      Enable management which will create tap interface for infrastructure segment
    default: true
    required: false

  segment_name:
    type: string
    hidden: false
    display_label: VMs Bridged Network Name
    description: Name of the Bridged Network for VMs.

  network_settings:
    type: list
    hidden: true
    display_label: VMs Network Settings
    description: List of VMDeployNetworkSettings
    default:
      - name: VNIC1
        segment_name: { get_input: segment_name }

  usb:
    type: list
    display_label: USB Passthrough
    description: >
      USB passthrough. A list of USB logical names (string). USB-1 to USB-10
    required: false
    default: []

  serial_port:
    type: list
    display_label: Serial Port
    description: >
      Serial port passthrough. A list of serial port object (VMDeploySerialPort)
    required: false
    default: []

  gpu:
    type: list
    display_label: GPU Passthrough
    description: >
      GPU passthrough. A list of GPU logical names (string). NVIDIA_A2-Slot1 to NVIDIA_A2-Slot8, NVIDIA_A30-Slot1 to NVIDIA_A30-Slot8
    required: false
    default: []

  cloudinit:
    type: dict
    display_label: Cloud Init Config
    description: >
      Cloud init cloud config, can be obtained with nativeedge.nodes.CloudInit.CloudConfig
    required: false
    default: {}

  iso_files:
    type: list
    display_label: ISO Files
    description: >
      List ISO files (references to catalog) to be downloaded before VM provisioning
    required: false

  dhcp:
    type: boolean
    display_label: Use DHCP
    description: Switch used to enable DHCP for IP Address assignment
    default: true

  static_ip:
    type: string
    display_label: VM Static IP And Mask Prefix
    description: >
      Static IP Address that will be assigned to the VM.

      Example: 172.20.6.154/21
    constraints:
      - pattern: ^(?:((25[0-5]|2[0-4]\d|1\d\d|\d{1,2})(\.(25[0-5]|2[0-4]\d|1\d\d|\d{1,2})){3})\/(3[0-2]|[12]?\d)|)$
    required: false

  gateway:
    type: string
    display_label: Gateway IP Address
    description: IP Address of the Network Gateway
    constraints:
      - pattern: ^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$|^$
    required: false

  dns:
    type: list
    display_label: DNS Servers
    description: List of DNS servers addresses
    default: []

  video:
    type: list
    hidden: true
    display_label: Video Passthrough
    description: >
      Video passthrough. A list of Video logical names (string). E.g. 'Onboard Controller'
    default: []
capabilities:

  vm_name:
    description: VM Name
    value: { get_attribute: ["vm_nativeedge", "capabilities", "vm_name"] }

  vm_ip:
    description: VM IP Address
    value: { get_attribute: ["vm", "capabilities", "vm_public_ip"] }

  service_tag:
    description: Service Tag
    value: { get_environment_capability: ece_service_tag }

  vm_user_name:
    description: VM User Name
    value: { get_input: vm_user_name }

  vm_ssh_key_secret_name:
    description: SSH Private Key Secret Name
    value: { get_input: key_private_secret_name }

node_templates:

  binary_image:
    type: nativeedge.nodes.template.BinaryImage
    properties:
      binary_image_config:
        artifact:
          path: { get_input: binary_image_artifact_url }
          username: { get_input: binary_image_artifact_username }
          access_token: { get_input: binary_image_access_token }
        version: { get_input: binary_image_version }
    interfaces:
      nativeedge.interfaces.lifecycle:
        precreate:
          implementation: nativeedge.nativeedge_plugin.tasks.validate_binary_image_config
        create:
          implementation: nativeedge.nativeedge_plugin.tasks.upload_binary
        delete:
          implementation: nativeedge.nativeedge_plugin.tasks.delete_binary

  netplan:
    type: nativeedge.nodes.CloudInit.CloudConfig
    interfaces:
      nativeedge.interfaces.lifecycle:
        create:
          implementation: vm/scripts/prepare_resource_config.py
          executor: central_deployment_agent
          inputs:
            template: vm/templates/network_config.yaml
            parameters:
              use_dhcp: { get_input: dhcp }
              static_ip: { get_input: static_ip }
              gateway: { get_input: gateway }
              dns: { get_input: dns }

  vm_ssh_proxy:
    type: nativeedge.nodes.Root
    interfaces:
      nativeedge.interfaces.lifecycle:
        create:
          implementation: nativeedge.nativeedge_plugin.tasks.get_eo_proxy
          max_retries: 2
          inputs:
            serviceTag: { get_attribute: ["vm_nativeedge", "capabilities", "service_tag"] }
            vmRef: { get_attribute: ["vm_nativeedge", "capabilities", "vm_name"] }
            port: 22
    relationships:
      - type: nativeedge.relationships.depends_on
        target: vm_nativeedge

  vm:
    type: nativeedge.nodes.Root
    interfaces:
      nativeedge.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: vm/scripts/get_vm_info.sh
            fabric_env:
              host_string: { get_attribute: ["vm_ssh_proxy", "eo_proxy_url"] }
              user: { get_attribute: ["vm_nativeedge", "capabilities", "vm_username"] }
              key: { get_secret: {get_attribute: [vm_nativeedge, capabilities, vm_ssh_key_secret_name]} }
              port: { get_attribute: ["vm_ssh_proxy", "eo_proxy_port"] }
            process:
              env:
                CONTEXT: node_lifecycle
                VM_HOST: { get_attribute: ["vm_ssh_proxy", "eo_proxy_url"] }
                VM_NAME: { get_attribute: ["vm_nativeedge", "capabilities", "vm_name"] }
                VM_USER_NAME: { get_attribute: ["vm_nativeedge", "capabilities", "vm_username"] }
                VM_SSH_PORT: { get_attribute: ["vm_ssh_proxy", "eo_proxy_port"] }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: vm_ssh_proxy

  vm_nativeedge:
    type: nativeedge.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          external_resource: true
          id: Virtual_Machine_with_cloud-init_for_NativeEdge_Endpoint_2.0.0
        deployment:
          inputs:
            vm_user_name: { get_input: vm_user_name }
            key_public_secret_name: { get_input: key_public_secret_name }
            key_private_secret_name: { get_input: key_private_secret_name }
            service_tag: { get_environment_capability: ece_service_tag }
            name: { concat: [{get_input: name}, "-vm"] }
            image: { get_attribute: ["binary_image", "binary_details", "extra", "artifact_id"] }
            os_type: { get_input: os_type }
            cpu: { get_input: cpu }
            memory: { get_input: memory }
            storage: { get_input: storage }
            disk: { get_input: disk }
            hardware_options.vTPM: { get_input: hardware_options.vTPM }
            hardware_options.secure_boot: { get_input: hardware_options.secure_boot }
            hardware_options.firmware_type: { get_input: hardware_options.firmware_type }
            enable_management: { get_input: enable_management }
            network_settings: { get_input: network_settings }
            usb: { get_input: usb }
            serial_port: { get_input: serial_port }
            gpu: { get_input: gpu }
            video: { get_input: video }
            netplan_cloudinit: { get_attribute: ["netplan", "template_resource_config"] }
            cloudinit: { get_input: cloudinit }
            iso_files: { get_input: iso_files }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: binary_image
      - type: nativeedge.relationships.depends_on
        target: netplan

