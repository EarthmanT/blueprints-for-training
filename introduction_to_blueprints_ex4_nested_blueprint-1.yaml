tosca_definitions_version: cloudify_dsl_1_5
description: >

  Service Composition- describing how to create relationship between independent services In this case we run the same web server and application from ex3 as an independent deployment and were adding an SSH certificate generator to that service. The example will also demonstrate how we can upload and instantiate all nested services on demand.

inputs:


  blueprint_archive:
    description: zip/tar archive of the blueprint, By default pointing to the archive of the curent parent deployments
    default: { concat: ["../../../uploaded-blueprints/", {get_sys: [tenant, name]}, "/", {get_sys: [deployment, blueprint]}, "/", {get_sys: [deployment, blueprint]}, ".tar.gz"] }
    hidden: true

imports:

  - cloudify/types/types.yaml

node_templates:


  WebServiceComponent:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          external_resource: false
          id: ex3-relationship-blueprint
          blueprint_archive: { get_input: blueprint_archive }
          main_file_name: ex3-relationship-blueprint.yaml
        deployment:
          id: ex3-relationship-blueprint

  Certificate:
    type: cloudify.nodes.ServiceComponent
    properties:
      resource_config:
        blueprint:
          external_resource: false
          id: gen-ssh-cert-service-component
          blueprint_archive: { get_input: blueprint_archive }
          main_file_name: gen-ssh-cert-service-component/blueprint.yaml
        deployment:
          inputs:
            key_name: { get_sys: ["deployment", "blueprint"] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: WebServiceComponent
capabilities:

  public_key:
    value: { get_attribute: ["Certificate", "capabilities", "public_key_content"] }

  local_url:
    value: { get_attribute: ["WebServiceComponent", "capabilities", "local_url"] }

