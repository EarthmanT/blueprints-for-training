tosca_definitions_version: cloudify_dsl_1_4
description: >

  This blueprint creates an AWS infrastructure environment using Ansible. libselinux-python/libselinux-python3 on the manager VM is prerequisite.

imports:

  - https://raw.githubusercontent.com/cloudify-community/cloudify-catalog/6.4.0-build/tabs/utilities/eaas/custom_types.yaml
  - cloudify/types/types.yaml
  - plugin:cloudify-ansible-plugin

inputs:


  aws_region_name:
    description: AWS region name
    display_label: AWS Region name
    type: string
    default: us-east-1
    constraints:
      - valid_values:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1
          - eu-central-1
          - eu-west-1
          - eu-west-2
          - eu-south-1
          - eu-west-3
          - eu-north-1
          - ap-northeast-3
          - ap-northeast-2
          - ap-southeast-1
          - ap-southeast-2
          - ap-northeast-1

  availability_zone:
    type: string
    display_label: The avability zone in the AWS region
    description: The availability zone in the AWS region
    default: { concat: [{get_input: aws_region_name}, "b"] }

node_templates:


  infra_suffix:
    type: eaas.nodes.UniquePrefixGenerator
    properties:
      predefined_value: ''

  install-infra-playbook:
    type: cloudify.nodes.ansible.Executor
    properties:
      playbook_path: playbooks/install_vpc.yaml
      sources: playbooks/inventory.yaml
      ansible_become: true
      run_data:
        availability_zone: { get_input: availability_zone }
        resource_suffix: { get_attribute: ["infra_suffix", "value"] }
      ansible_env_vars:
        AWS_ACCESS_KEY_ID: { get_secret: aws_access_key_id }
        AWS_SECRET_ACCESS_KEY: { get_secret: aws_secret_access_key }
        AWS_REGION: { get_input: aws_region_name }
      extra_packages:
        - boto3==1.16.26
        - boto==2.49.0
        - selinux
        - ndg-httpsclient
        - pyopenssl
        - pyasn1
        - urllib3

  uninstall-infra-playbook:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        stop:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            playbook_path: playbooks/uninstall_vpc.yaml
            start_at_task: Delete route table
            sources: playbooks/inventory.yaml
            run_data:
              internet_gateway_id: { get_attribute: ["aws_infra_info", "internet_gateway_id"] }
              route_table_id: { get_attribute: ["aws_infra_info", "route_table_id"] }
              subnet_id: { get_attribute: ["aws_infra_info", "subnet_id"] }
              vpc_id: { get_attribute: ["aws_infra_info", "vpc_id"] }
              vpc_name: { get_attribute: ["aws_infra_info", "vpc_name"] }
            ansible_env_vars:
              AWS_ACCESS_KEY_ID: { get_secret: aws_access_key_id }
              AWS_SECRET_ACCESS_KEY: { get_secret: aws_secret_access_key }
              AWS_REGION: { get_input: aws_region_name }
            extra_packages:
              - boto3==1.16.26
              - boto==2.49.0
              - selinux
              - ndg-httpsclient
              - pyopenssl
              - pyasn1
              - urllib3
    relationships:
      - type: cloudify.relationships.depends_on
        target: aws_infra_info

  aws_infra_info:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/store_deployment_info.py
          executor: central_deployment_agent
    relationships:
      - type: cloudify.relationships.depends_on
        target: install-infra-playbook
capabilities:

  vpc_id:
    description: Created VPC id.
    value: { get_attribute: ["aws_infra_info", "vpc_id"] }

  subnet_id:
    description: Created subnet id.
    value: { get_attribute: ["aws_infra_info", "subnet_id"] }

