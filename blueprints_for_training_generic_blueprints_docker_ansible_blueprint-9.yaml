tosca_definitions_version: nativeedge_1_0

imports:
  - nativeedge/types/types.yaml
  - plugin:nativeedge-docker-plugin

inputs:

  docker_host:
    type: string
    required: true

  docker_user:
    type: string
    required: true

  install_playbook_name:
    description: installation playbook name
    type: string
    default: create.yaml

  install_playbook:
    description: >
      installation playbook path [inside blueprint to be exported to docker host]
    type: string
    default: { concat: ["ansible/", {get_input: install_playbook_name}] }

  uninstall_playbook_name:
    description: uninstallation playbook name
    type: string
    default: delete.yaml

  uninstall_playbook:
    description: >
      uninstallation playbook path [inside blueprint to be exported to docker host]
    type: string
    default: { concat: ["ansible/", {get_input: uninstall_playbook_name}] }

  ansible_version:
    description: Ansible version to prepare image for
    type: string
    default: 2.9.5

  image_tag:
    description: Tag for the image to build
    type: string
    default: 'ansible:'

  install_container_volume:
    description: volume that will be mapped to container
    type: string
    default: /install-ansible-playbooks

  uninstall_container_volume:
    description: volume that will be mapped to container
    type: string
    default: /uninstall-ansible-playbooks

dsl_definitions:

  docker_config:
    docker_host: { get_input: docker_host }
    docker_rest_port: 2375

node_templates:

  docker_ansible_image:
    type: nativeedge.nodes.docker.image
    properties:
      client_config:
        docker_host: { get_input: docker_host }
        docker_rest_port: 2375
      resource_config:
        image_content: { concat: [\FROM amd64/centos:7\nMAINTAINER Cosmo (hello@cloudify.co)\nRUN yum install -y openssh-server openssh-clients\nRUN curl "https://bootstrap.pypa.io/pip/2.7/get-pip.py" -o "get-pip.py"\nRUN python get-pip.py\nRUN pip install --upgrade pip==9.0.1\n\, "RUN pip install ansible==", {get_input: ansible_version}] }
        tag: { concat: [{get_input: image_tag}, {get_input: ansible_version}] }

  install_ansible_container_files:
    type: nativeedge.nodes.docker.container_files
    properties:
      resource_config:
        docker_machine:
          docker_ip: { get_input: docker_host }
          docker_user: { get_input: docker_user }
          docker_key: { get_secret: agent_key_private }
        source: { get_input: install_playbook }
        destination: ''
        ansible_sources:
          container_volume: { get_input: install_container_volume }
          playbook_path: { concat: [{get_input: install_container_volume}, "/", {get_input: install_playbook_name}] }
          ansible_host: 127.0.0.1
          ansible_connection: local

  uninstall_ansible_container_files:
    type: nativeedge.nodes.docker.container_files
    properties:
      resource_config:
        docker_machine:
          docker_ip: { get_input: docker_host }
          docker_user: { get_input: docker_user }
          docker_key: { get_secret: agent_key_private }
        source: { get_input: uninstall_playbook }
        destination: ''
        ansible_sources:
          container_volume: { get_input: uninstall_container_volume }
          playbook_path: { concat: [{get_input: uninstall_container_volume}, "/", {get_input: uninstall_playbook_name}] }
          ansible_host: 127.0.0.1
          ansible_connection: local

  docker_ansible_container:
    type: nativeedge.nodes.docker.container
    properties:
      client_config:
        docker_host: { get_input: docker_host }
        docker_rest_port: 2375
      resource_config:
        image_tag: { concat: [{get_input: image_tag}, {get_input: ansible_version}] }
        container_args:
          command: { get_attribute: ["install_ansible_container_files", "ansible_container_command_arg"] }
          working_dir: { get_input: install_container_volume }
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
            ANSIBLE_INVALID_TASK_ATTRIBUTE_FAILED: false
          volumes:
            - { get_input: install_container_volume }
            - { get_input: uninstall_container_volume }
          volumes_mapping:
            - { get_attribute: ["install_ansible_container_files", "destination"] }
            - { get_attribute: ["uninstall_ansible_container_files", "destination"] }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: docker_ansible_image
      - type: nativeedge.relationships.depends_on
        target: install_ansible_container_files
      - type: nativeedge.relationships.depends_on
        target: uninstall_ansible_container_files
    interfaces:
      nativeedge.interfaces.lifecycle:
        stop:
          implementation: docker.nativeedge_docker.tasks.stop_container
          inputs:
            stop_command: { get_attribute: ["uninstall_ansible_container_files", "ansible_container_command_arg"] }

