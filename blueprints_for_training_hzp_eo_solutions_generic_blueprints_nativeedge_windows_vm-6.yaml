tosca_definitions_version: nativeedge_1_0

description: >
  Blueprint creates a VM on ECE using Native Edge Plugin

imports:
  - nativeedge/types/types.yaml
  - vm/inputs.yaml
  - vm/outputs.yaml
  - vm/blueprint.yaml
  - plugin:nativeedge-plugin
  - plugin:nativeedge-ansible-plugin
  - plugin:nativeedge-utilities-plugin
labels:

  csys-obj-type:
    values:
      - environment
blueprint_labels:

  env:
    values:
      - NED

  hidden:
    values:
      - 'true'

inputs:

  vm_user_name:
    type: string
    display_label: VM User Name
    description: Name of the user on the Windows VM
    required: true
    default: Administrator

  vm_password:
    type: string
    required: true
    display_label: Password of the VM User
    description: Password of the user for the Windows VM

  service_tag:
    type: string
    display_label: ECE Service Tag
    description: Service Tag of the ECE where VM will be created.

  name:
    type: string
    display_label: VM Name
    description: VM name

  image:
    type: string
    display_label: Image ID
    description: Reference to Catalog Artifact ID

  os_type:
    type: string
    display_label: OS Type
    description: Type of OS running on a VM
    constraints:
      - valid_values:
          - WIN10-32B
          - WIN10-64B
          - WIN11
          - WIN2022-SERVER
          - WIN2019-SERVER
          - WIN-OTHERS
          - OTHERS

  cpu:
    type: integer
    display_label: vCPUs
    description: Number of CPUs
    default: 2

  memory:
    type: string
    display_label: Memory with unit
    description: Memory with unit [KB,MB,GB,TB,PB,EB,ZB,YB]
    default: 2GB

  storage:
    type: string
    display_label: Storage size with unit
    description: Storage size with unit [KB,MB,GB,TB,PB,EB,ZB,YB]
    default: 4GB

  disk:
    type: string
    display_label: Disk Path
    description: >
      Deployment datastore path on target ECE. Available datastores can be retrieved from inventory service
    default: /DataStore0

  hardware_options.vTPM:
    type: boolean
    display_label: Hardware Options - vTPM
    description: >
      Enable vTPM. Required for Win11 OS, optional for other OS
    default: false
    required: false

  hardware_options.secure_boot:
    type: boolean
    display_label: Hardware Options - Secure Boot
    description: >
      Enable secure boot. Required for Win11 OS, optional for other OS
    default: false
    required: false

  hardware_options.firmware_type:
    type: string
    display_label: Hardware Options - Firmware Type
    description: Firmware type. For Win11 OS, it must be UEFI
    default: BIOS
    required: false
    constraints:
      - valid_values:
          - BIOS
          - UEFI

  enable_management:
    type: boolean
    display_label: Enable Management
    description: >
      Enable management which will create tap interface for infrastructure segment
    default: true
    required: false

  dhcp:
    type: boolean
    hidden: false
    display_label: Use DHCP
    description: Switch used to enable DHCP for IP Address assignment
    default: true

  static_ip:
    type: string
    hidden: false
    display_label: Static IP Address
    description: >
      Static IP Address with netmask that will be assigned to the VM. Subnet range needs to include the Default Gateway IP Address. Example: 172.20.6.154/21
    required: false
    constraints:
      - pattern: ^((25[0-5]|2[0-4]\d|1\d\d|\d{1,2})(\.(\d{1,3})){3}(\/(3[0-2]|[12]?\d))?|)$

  dns:
    type: list
    hidden: false
    display_label: List of DNS Servers
    description: List of DNS servers addresses
    required: false

  gateway:
    type: string
    hidden: false
    display_label: Gateway IP Address
    description: IP Address of the Network Gateway
    required: false
    constraints:
      - pattern: ^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$|^$

  network_settings:
    type: list
    display_label: Network Settings
    description: List of VMDeployNetworkSettings
    required: false

  usb:
    type: list
    display_label: USB Passthrough
    description: >
      USB passthrough. A list of USB logical names (string). USB-1 to USB-10
    required: false
    default: []

  serial_port:
    type: list
    display_label: Serial Port
    description: >
      Serial port passthrough. A list of serial port object (VMDeploySerialPort)
    required: false
    default: []

  gpu:
    type: list
    display_label: GPU Passthrough
    description: >
      GPU passthrough. A list of GPU logical names (string). NVIDIA_A2-Slot1 to NVIDIA_A2-Slot8, NVIDIA_A30-Slot1 to NVIDIA_A30-Slot8
    required: false
    default: []

  video:
    type: list
    display_label: Video Passthrough
    description: >
      Video passthrough. A list of Video logical names (string). E.g. 'Onboard Controller'
    required: false
    default: []

  netplan_cloudinit:
    type: dict
    hidden: true
    display_label: Netplan Cloud Init
    description: >
      Network configuration to be set during Cloud-Init execution
    default:
      network:
        version: 2
        renderer: networkd
        ethernets:
          enp1s0:
            dhcp4: true
          enp2s0:
            dhcp4: true
            dhcp4-overrides:
              use-routes: false

  cloudinit:
    type: string
    display_label: Cloud Init Config
    description: >
      Cloud init cloud config, can be obtained with nativeedge.nodes.CloudInit.CloudConfig
    required: false
    default: ''

  iso_files:
    type: list
    display_label: ISO Files
    description: >
      List ISO files (references to catalog) to be downloaded before VM provisioning
    required: false
capabilities:

  vm_name:
    description: VM Name
    value: { get_attribute: ["vm", "vm_details", "name"] }

  service_tag:
    description: Service Tag
    value: { get_property: ["vm", "vm_config", "location"] }

  vm_username:
    description: VM User Name
    value: { get_input: vm_user_name }

  vm_tap_mac_addr:
    description: VM TAP Interface MAC Address
    value: { get_attribute: ["vm", "vm_details", "extra", "tap_interfaces", 0, "vmInterface", "mac"] }

dsl_definitions:

  ansible_external_venv: /opt/ansible

  inputs:
    sources: { get_property: ["SELF", "sources"] }
    sensitive_keys: { get_property: ["SELF", "sensitive_keys"] }
    log_stdout: false
    store_facts: false
    debug_level: 0

node_templates:

  cloudinit:
    type: nativeedge.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: { get_input: vm_user_name }
            primary_group: Users
            groups: Administrators
            passwd: { get_input: vm_password }
            expiredate: '2099-12-31'

  vm:
    type: nativeedge.nodes.template.NativeEdgeVM
    properties:
      vm_config:
        location: { get_input: service_tag }
        name: { get_input: name }
        image: { get_input: image }
        os_type: { get_input: os_type }
        resource_constraints:
          cpu: { get_input: cpu }
          memory: { get_input: memory }
          storage: { get_input: storage }
          disk: { get_input: disk }
        hardware_options:
          vTPM: { get_input: hardware_options.vTPM }
          secure_boot: { get_input: hardware_options.secure_boot }
          firmware_type: { get_input: hardware_options.firmware_type }
        enable_management: { get_input: enable_management }
        network_settings: { get_input: network_settings }
        ports:
          usb: { get_input: usb }
          serial_port: { get_input: serial_port }
          gpu: { get_input: gpu }
          video: { get_input: video }
        cloudinit: { get_attribute: ["cloudinit", "cloud_config"] }
        iso_files: { get_input: iso_files }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: cloudinit

  winrm_proxy:
    type: nativeedge.nodes.Root
    interfaces:
      nativeedge.interfaces.lifecycle:
        create:
          implementation: nativeedge.nativeedge_plugin.tasks.get_eo_proxy
          max_retries: 5
          inputs:
            serviceTag: { get_property: ["vm", "vm_config", "location"] }
            vmRef: { get_attribute: ["vm", "vm_details", "name"] }
            port: 5985
    relationships:
      - type: nativeedge.relationships.depends_on
        target: vm

  resolve_ip:
    type: nativeedge.nodes.ansible.Executor
    properties:
      ansible_external_venv: /opt/ansible
      number_of_attempts: 10
      sensitive_keys:
        - ansible_user
        - ansible_password
      sources:
        all:
          hosts:
            win:
              ansible_host: { get_attribute: ["winrm_proxy", "eo_proxy_url"] }
              ansible_port: { get_attribute: ["winrm_proxy", "eo_proxy_port"] }
              ansible_user: { get_input: vm_user_name }
              ansible_password: { get_input: vm_password }
              ansible_connection: winrm
              ansible_winrm_scheme: http
              ansible_winrm_transport: ntlm
              ansible_winrm_operation_timeout_sec: 180
              ansible_winrm_read_timeout_sec: 360
    interfaces:
      nativeedge.interfaces.lifecycle:
        start:
          timeout: 600
          max_retries: 10
          retry_interval: 60
          implementation: ansible.ne_ansible.tasks.run
          inputs:
            sources: { get_property: ["SELF", "sources"] }
            sensitive_keys:
              - tap_nic_mac
            log_stdout: false
            store_facts: false
            debug_level: 0
            playbook_path: vm/ansible/resolve_ip.yaml
            run_data:
              vm_user_name: { get_input: vm_user_name }
              use_dhcp: { get_input: dhcp }
              static_ip: { get_input: static_ip }
              gateway: { get_input: gateway }
              dns: { get_input: dns }
              tap_nic_mac: { get_attribute: ["vm", "vm_details", "extra", "tap_interfaces", 0, "vmInterface", "mac"] }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: vm
      - type: nativeedge.relationships.depends_on
        target: winrm_proxy

