tosca_definitions_version: nativeedge_1_0
description: >

  This blueprint create a managed Azure Kubernetes AKS cluster.

imports:

  - nativeedge/types/types.yaml
  - plugin:nativeedge-azure-plugin?version= >=3.3.0
  - plugin:nativeedge-kubernetes-plugin?version= >=2.7.0
  - plugin:nativeedge-utilities-plugin?version= >=1.22.1

inputs:


  subscription_id:
    display_label: Subscription Id
    type: string
    required: false
    default: { get_secret: azure_subscription_id }

  tenant_id:
    display_label: Tenant Id
    type: string
    required: false
    default: { get_secret: azure_tenant_id }

  client_id:
    display_label: Client Id
    type: string
    required: false
    default: { get_secret: azure_client_id }

  client_secret:
    display_label: Client Secret
    type: string
    required: false
    default: { get_secret: azure_client_secret }

  location:
    display_label: Location
    type: string
    required: true
    default: eastus2

  env_name:
    display_label: Env Name
    type: string
    description: Must be a single letter. Managed Cluster Name has length restrictions.
    default: a1
    constraints:
      - pattern: ^[a-z][a-z0-9]{1,5}$

  resource_group_name:
    display_label: Resource Group Name
    type: string
    default: { concat: ["cfyaksrg", {get_input: env_name}] }

  managed_cluster_name:
    display_label: Managed Cluster Name
    type: string
    default: { concat: ["cfyaks", {get_input: env_name}] }

  service_account_name:
    display_label: Service Account Name
    type: string
    default: examples-user

  service_account_namespace:
    display_label: Service Account Namespace
    type: string
    default: default

  agent_key_name:
    display_label: Agent Key Name
    type: string
    default: agent_key
dsl_definitions:

  client_config:
    subscription_id: { get_input: subscription_id }
    tenant_id: { get_input: tenant_id }
    client_id: { get_input: client_id }
    client_secret: { get_input: client_secret }

  resource_config:
    location: { get_input: location }
    tags:
      Name: { concat: ["AKS_Test", {get_input: env_name}] }
      tier: Testing
    kubernetes_version: ''
    dns_prefix: { concat: ["akstest", {get_input: env_name}] }
    agent_pool_profiles:
      - name: { concat: ["nodepool1", {get_input: env_name}] }
        count: 3
        vmSize: Standard_DS2_v2
        osType: Linux
        type: VirtualMachineScaleSets
        availabilityZones:
          - '1'
          - '2'
          - '3'
        mode: System
    linux_profile:
      adminUsername: azureuser
      ssh:
        publicKeys:
          - keyData: { get_attribute: ["agent_key", "public_key_export"] }
    network_profile:
      loadBalancerSku: standard
      outboundType: loadBalancer
      loadBalancerProfile:
        managedOutboundIPs:
          count: 2
    service_principal_profile:
      clientId: { get_input: client_id }
      secret: { get_input: client_secret }
    addon_profiles: {}
    enable_rbac: true

node_templates:


  resource_group:
    type: nativeedge.nodes.azure.ResourceGroup
    properties:
      name: { get_input: resource_group_name }
      location: { get_input: location }
      client_config:
        subscription_id: { get_input: subscription_id }
        tenant_id: { get_input: tenant_id }
        client_id: { get_input: client_id }
        client_secret: { get_input: client_secret }

  managed_cluster:
    type: nativeedge.nodes.azure.compute.ManagedCluster
    properties:
      resource_group: { get_input: resource_group_name }
      name: { get_input: managed_cluster_name }
      resource_config:
        location: { get_input: location }
        tags:
          Name: { concat: ["AKS_Test", {get_input: env_name}] }
          tier: Testing
        kubernetes_version: ''
        dns_prefix: { concat: ["akstest", {get_input: env_name}] }
        agent_pool_profiles:
          - name: { concat: ["nodepool1", {get_input: env_name}] }
            count: 3
            vmSize: Standard_DS2_v2
            osType: Linux
            type: VirtualMachineScaleSets
            availabilityZones:
              - '1'
              - '2'
              - '3'
            mode: System
        linux_profile:
          adminUsername: azureuser
          ssh:
            publicKeys:
              - keyData: { get_attribute: ["agent_key", "public_key_export"] }
        network_profile:
          loadBalancerSku: standard
          outboundType: loadBalancer
          loadBalancerProfile:
            managedOutboundIPs:
              count: 2
        service_principal_profile:
          clientId: { get_input: client_id }
          secret: { get_input: client_secret }
        addon_profiles: {}
        enable_rbac: true
      client_config:
        subscription_id: { get_input: subscription_id }
        tenant_id: { get_input: tenant_id }
        client_id: { get_input: client_id }
        client_secret: { get_input: client_secret }
      store_kube_config_in_runtime: true
    relationships:
      - type: nativeedge.relationships.azure.contained_in_resource_group
        target: resource_group
      - type: nativeedge.relationships.depends_on
        target: agent_key

  new_service_account:
    type: nativeedge.nodes.kubernetes.resources.ServiceAccount
    properties:
      client_config:
        configuration:
          file_content: { get_attribute: ["managed_cluster", "kubeconf"] }
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: { get_input: service_account_name }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: managed_cluster

  new_role_binding:
    type: nativeedge.nodes.kubernetes.resources.RoleBinding
    properties:
      client_config:
        configuration:
          file_content: { get_attribute: ["managed_cluster", "kubeconf"] }
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: { get_input: service_account_name }
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            name: { get_input: service_account_name }
            namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: managed_cluster

  secret:
    type: nativeedge.nodes.kubernetes.resources.Secret
    properties:
      client_config:
        configuration:
          file_content: { get_attribute: ["managed_cluster", "kubeconf"] }
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: { concat: [{get_input: service_account_name}, "-token"] }
          annotations:
            kubernetes.io/service-account.name: { get_input: service_account_name }
        type: kubernetes.io/service-account-token
    relationships:
      - type: nativeedge.relationships.depends_on
        target: new_role_binding
      - type: nativeedge.relationships.depends_on
        target: new_service_account

  store_token:
    type: nativeedge.nodes.Root
    interfaces:
      nativeedge.interfaces.lifecycle:
        create:
          implementation: scripts/store_kube_token.py
          executor: central_deployment_agent
          inputs:
            kube_token: { get_attribute: ["secret", "kubernetes", "data", "token"] }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: secret

  sanity_pod:
    type: nativeedge.nodes.kubernetes.resources.FileDefinedResource
    properties:
      client_config:
        configuration:
          api_options:
            host: { get_attribute: ["managed_cluster", "kubeconf", "clusters", 0, "cluster", "server"] }
            api_key: { get_attribute: ["store_token", "token"] }
            debug: false
            verify_ssl: false
      validate_resource_status: true
      file:
        resource_path: resources/template.yaml
    relationships:
      - type: nativeedge.relationships.depends_on
        target: store_token
    interfaces:
      nativeedge.interfaces.lifecycle:
        precreate: {}
        create:
          implementation: kubernetes.ne_kubernetes.tasks.file_resource_create
        configure: {}
        start:
          implementation: kubernetes.ne_kubernetes.tasks.file_resource_delete
        poststart: {}
        prestop: {}
        stop: {}
        delete: {}
        postdelete: {}

  agent_key:
    type: nativeedge.nodes.keys.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      nativeedge.interfaces.lifecycle:
        create:
          implementation: keys.ne_ssh_key.operations.create
          inputs:
            store_private_key_material: true
capabilities:

  endpoint:
    description: The external endpoint of the application.
    value: { get_attribute: ["managed_cluster", "kubeconf", "clusters", 0, "cluster", "server"] }

  connection_details:
    description: connection details
    value:
      file_content: { get_attribute: ["managed_cluster", "kubeconf"] }
outputs:

  endpoint:
    description: The external endpoint of the application.
    value: { get_attribute: ["managed_cluster", "kubeconf", "clusters", 0, "cluster", "server"] }

