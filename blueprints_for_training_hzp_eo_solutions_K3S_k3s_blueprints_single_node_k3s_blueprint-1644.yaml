tosca_definitions_version: nativeedge_1_0

description: >
  Blueprint installs a K3s server with a workload on single VM.

imports:
  - nativeedge/types/types.yaml
  - common/eo/single_node_k3s_definitions.yaml
  - common/external/single_node_k3s_definitions.yaml
  - common/external/helm_definitions.yaml
  - common/external/nfs_definitions.yaml
  - common/single_node_k3s_inputs.yaml
  - common/single_node_k3s_outputs.yaml
  - plugin:nativeedge-utilities-plugin
  - plugin:nativeedge-fabric-plugin
labels:

  csys-obj-type:
    values:
      - environment

  environment:
    values:
      - k3s
blueprint_labels:

  env:
    values:
      - NED

  hidden:
    values:
      - 'true'

node_templates:

  secrets:
    type: nativeedge.nodes.secrets.Writer
    properties:
      entries:
        kubeconfig: { get_attribute: ["install_k3s_server", "kubeconfig"] }
        cluster_k3s_token: { get_attribute: ["install_k3s_server", "token"] }
        kubernetes_credentials:
          hostname: { get_attribute: ["install_k3s_server", "hostname"] }
          portNumber: { get_attribute: ["install_k3s_server", "port"] }
          caCerificate: { get_attribute: ["install_k3s_server", "ca_cert"] }
          authentication: TLS
          userCertificate: { get_attribute: ["install_k3s_server", "user_cert"] }
          privateKey: { get_attribute: ["install_k3s_server", "private_key"] }
      do_not_delete: false
      variant: { get_sys: ["deployment", "id"] }
      separator: '-'
    relationships:
      - type: nativeedge.relationships.depends_on
        target: install_k3s_server

  install_k3s_server:
    type: nativeedge.nodes.Root
    interfaces:
      nativeedge.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/k3s_install_controlplane.sh
            fabric_env:
              host_string: { get_input: node1_ip }
              user: { get_input: node1_username }
              key: { get_secret: {get_input: node1_ssh_key_private} }
              port: { get_input: node1_port }
            process:
              env:
                CONTROLPLANE_IP: { get_input: node1_public_ip }
                VERSION: { get_input: k3s_version }
                DISABLE_LOCAL_STORAGE: { get_input: disable_local_storage }
                TAINT_CONTROLPLANE: { get_input: taint_controlplane }
                ENVIRONMENT_TYPE: { get_input: environment_type }
                CURL_CONFIG: { concat: [\\\"\\\, {get_secret: {get_input: artifact_download_config_secret_name}}, \\\"\\\] }
                K3S_IMAGES_URL: { get_input: k3s_bin }
                K3S_BIN_URL: { get_input: k3s_images_tar_archive }
        poststart:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/download_longhorn_images.sh
            fabric_env:
              host_string: { get_input: node1_ip }
              user: { get_input: node1_username }
              key: { get_secret: {get_input: node1_ssh_key_private} }
              port: { get_input: node1_port }
            process:
              env:
                ENVIRONMENT_TYPE: { get_input: environment_type }
                CURL_CONFIG: { concat: [\\\"\\\, {get_secret: {get_input: artifact_download_config_secret_name}}, \\\"\\\] }
                ARTIFACTORY_LONGHORN_IMAGES_URL: { get_input: longhorn_images_tar_archive }
                INSTALL_LONGHORN: { get_input: install_longhorn }
                INSTALL_NVIDIA_PLUGIN: { get_input: install_nvidia_device_plugin }
                NVIDIA_PLUGIN_IMAGE_URL: { get_input: nvidia_image_tar_archive }
        check_drift:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/tasks.py
            task_name: check_drift
            task_properties:
              new_k3s_version: { get_input: k3s_version }
            fabric_env:
              host_string: { get_input: node1_ip }
              user: { get_input: node1_username }
              key: { get_secret: {get_input: node1_ssh_key_private} }
              port: { get_input: node1_port }
            hide_output: false
        update:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/k3s_upgrade.sh
            fabric_env:
              host_string: { get_input: node1_ip }
              user: { get_input: node1_username }
              key: { get_secret: {get_input: node1_ssh_key_private} }
              port: { get_input: node1_port }
            process:
              env:
                NEW_K3S_VERSION: { get_input: k3s_version }
                CONTROLPLANE_IP: { get_input: node1_public_ip }
                DISABLE_LOCAL_STORAGE: { get_input: disable_local_storage }
                TAINT_CONTROLPLANE: { get_input: taint_controlplane }
                ENVIRONMENT_TYPE: { get_input: environment_type }
                CURL_CONFIG: { concat: [\\\"\\\, {get_secret: {get_input: artifact_download_config_secret_name}}, \\\"\\\] }
                K3S_IMAGES_URL: { get_input: k3s_bin }
                K3S_BIN_URL: { get_input: k3s_images_tar_archive }
                INTERFACE: { get_input: interface }

  install_helm:
    type: nativeedge.nodes.Root
    relationships:
      - type: ne.relationships.install_helm_on_k3s
        target: install_k3s_server
        target_interfaces:
          nativeedge.interfaces.relationship_lifecycle:
            preconfigure:
              inputs:
                fabric_env:
                  host_string: { get_input: node1_ip }
                  user: { get_input: node1_username }
                  key: { get_secret: {get_input: node1_ssh_key_private} }
                  port: { get_input: node1_port }
                process:
                  env:
                    ENABLE_NFS_STORAGE: { get_input: enable_nfs_storage }
                    ENVIRONMENT_TYPE: { get_input: environment_type }
                    INSTALL_LONGHORN: { get_input: install_longhorn }
                    CURL_CONFIG: { concat: [\\\"\\\, {get_secret: {get_input: artifact_download_config_secret_name}}, \\\"\\\] }
                    HELM_TAR_ARCHIVE_URL: { get_input: helm_tar_archive }

  install_longhorn:
    type: nativeedge.nodes.Root
    interfaces:
      nativeedge.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/install_longhorn.sh
            fabric_env:
              host_string: { get_input: node1_ip }
              user: { get_input: node1_username }
              key: { get_secret: {get_input: node1_ssh_key_private} }
              port: { get_input: node1_port }
            process:
              env:
                REPLICAS_NUMBER: { get_input: longhorn_replicas_number }
                INSTALL_LONGHORN: { get_input: install_longhorn }
                CLUSTER_IP: { get_input: node1_public_ip }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: install_helm

  install_nvidia_device_plugin:
    type: nativeedge.nodes.Root
    interfaces:
      nativeedge.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/install_nvidia_device_plugin.sh
            fabric_env:
              host_string: { get_input: node1_ip }
              user: { get_input: node1_username }
              key: { get_secret: {get_input: node1_ssh_key_private} }
              port: { get_input: node1_port }
            process:
              env:
                INSTALL_NVIDIA_PLUGIN: { get_input: install_nvidia_device_plugin }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: install_k3s_server

  install_nfs:
    type: nativeedge.nodes.Root
    interfaces:
      nativeedge.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/nfs/install_nfs_provisioner.sh
            fabric_env:
              host_string: { get_input: node1_ip }
              user: { get_input: node1_username }
              key: { get_secret: {get_input: node1_ssh_key_private} }
              port: { get_input: node1_port }
            process:
              env:
                ENABLE_NFS_STORAGE: { get_input: enable_nfs_storage }
                ENVIRONMENT_TYPE: { get_input: environment_type }
                NFS_SERVER: { get_input: nfs_server }
                NFS_PATH: { get_input: nfs_path }
                NFS_SC_NAME: { get_input: nfs_sc_name }
    relationships:
      - type: nativeedge.relationships.depends_on
        target: install_helm
      - type: ne.relationships.nfs_connected_to_k3s
        target: install_k3s_server
        target_interfaces:
          nativeedge.interfaces.relationship_lifecycle:
            postconfigure:
              inputs:
                fabric_env:
                  host_string: { get_input: node1_ip }
                  user: { get_input: node1_username }
                  key: { get_secret: {get_input: node1_ssh_key_private} }
                  port: { get_input: node1_port }
relationships:

  ne.relationships.install_helm_on_k3s:
    derived_from: nativeedge.relationships.depends_on
    target_interfaces:
      nativeedge.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/install_helm.sh
            fabric_env:
              default: {}
            process:
              default:
                env:
                  INSTALL_LONGHORN: { get_input: install_longhorn }
                  ENABLE_NFS_STORAGE: { get_input: enable_nfs_storage }
                  ENVIRONMENT_TYPE: { get_input: environment_type }
                  CURL_CONFIG: { concat: [\\\"\\\, {get_secret: {get_input: artifact_download_config_secret_name}}, \\\"\\\] }
                  HELM_TAR_ARCHIVE_URL: { get_input: helm_tar_archive }

  ne.relationships.nfs_connected_to_k3s:
    derived_from: nativeedge.relationships.depends_on
    target_interfaces:
      nativeedge.interfaces.relationship_lifecycle:
        postconfigure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/nfs/install_nfs_common.sh
            fabric_env:
              default: {}
            process:
              default:
                env:
                  ENABLE_NFS_STORAGE: { get_input: enable_nfs_storage }
                  ENVIRONMENT_TYPE: { get_input: environment_type }
                  CURL_CONFIG: { concat: [\\\"\\\, {get_secret: {get_input: artifact_download_config_secret_name}}, \\\"\\\] }
                  NFS_COMMON_PACKAGES_TAR_ARCHIVE_URL: { get_input: nfs_common_packages_tar_archive }

dsl_definitions:

  k3s_bin: k3s

  k3s_images_tar_archive: k3s-airgap-images-amd64.tar

  longhorn_images_tar_archive: longhorn_images.tar.gz

  helm_tar_archive: helm-v3.12.1-linux-amd64.tar.gz

  nfs_subdir_external_provisioner_tar_archive: nfs-subdir-external-provisioner.tar

  nfs_common_packages_tar_archive: nfs_common_packages.tar.gz

  nvidia_image_tar_archive: nvidia_device_plugin.tar.gz

inputs:

  node1_ip:
    type: string
    allow_update: false
    display_label: Node 01 VM IP
    description: Node 01 VM IP

  node1_public_ip:
    type: string
    allow_update: false
    display_label: Node 01 Virtual Machine Public IP
    description: Node 01 Virtual Machine Public IP

  node1_username:
    type: string
    allow_update: false
    display_label: Node 01 VM Username
    description: Node 01 VM Username

  node1_ssh_key_private:
    type: string
    allow_update: false
    display_label: Node 01 VM SSH Private Key Secret Name
    description: Node 01 VM SSH Private Key Secret Name

  node1_port:
    description: VM SSH port to deploy application onto guest VM
    type: string
    allow_update: false
    default: '22'

  interface:
    type: string
    allow_update: false
    display_label: Interface Name
    description: Name of interface
    default: enp1s0

  k3s_version:
    type: string
    allow_update: false
    display_label: K3s Version
    description: K3s version to install
    default: v1.26.5+k3s1

  disable_local_storage:
    type: boolean
    display_label: Disable local storage
    description: If true, disables local storage
    hidden: true
    default: false

  taint_controlplane:
    type: boolean
    display_label: Taint control plane
    description: If true, taints control plane (controlplane) nodes
    default: false
    hidden: true

  install_longhorn:
    type: boolean
    allow_update: false
    display_label: Install Longhorn
    description: Enable to install Longhorn storage support
    default: true

  longhorn_replicas_number:
    type: integer
    allow_update: false
    display_label: Longhorn Replicas Number
    description: Number of longhorn replicas
    default: 1

  enable_nfs_storage:
    type: boolean
    allow_update: false
    display_label: Enable NFS Storage
    description: If true, enables NFS storage class
    default: false

  nfs_server:
    type: string
    display_label: NFS Server IP Address
    description: 'IP address. Example: 171.16.0.1'
    required: false
    allow_update: false

  nfs_path:
    type: string
    display_label: NFS Path
    description: >
      Path to the NFS shared directory on the server.

      Example: /nfs
    required: false
    allow_update: false

  nfs_sc_name:
    type: string
    allow_update: false
    display_label: NFS Storage Class
    description: >
      Name of the NFS storage class.

      Example: nfs
    default: nfs

  environment_type:
    type: string
    allow_update: false
    default: internet_connected
    constraints:
      - valid_values:
          - airgapped
          - internet_connected
    description: >
      airgapped - all the binaries will be downloaded from the local artifact store.

      internet_connected - for binaries that are available on the Internet with public URL - it will be used

  artifact_base_url:
    type: string
    allow_update: false
    description: This URL is used to construct subsequent artifacts URLs.Artifacts location will be concatenated to this base URL to fetch particular artifact,unless user overrides the spacific artifact URL input.User must provide this value. In case that all artifact inputs are overriden, thisinput value will not be used and can be any string.Exmaple values:  http://192.168.1.1/artifacts  https://user:password@mys3.domain.dom/bucket1  smb://1.2.3.4/  ftp://localftp.server.com/some/dir
    default: ''

  artifact_download_config_secret_name:
    type: string
    default: artifact_download_config_secret_name
    description: >
      The secret name that contains the config used for download framework to fetch artifacts.

      Pelase see https://curl.se/docs/manpage.html for details.

  k3s_bin:
    type: string
    hidden: true
    default: { concat: [{get_input: artifact_base_url}, "/", "k3s"] }
    description: >
      Solution example RPM can be dowloaded from https://example.com/solutions/example/2.0.0

  k3s_images_tar_archive:
    type: string
    hidden: true
    default: { concat: [{get_input: artifact_base_url}, "/", "k3s-airgap-images-amd64.tar"] }
    description: >
      Dependency library that can be downloaded from https://example.domain.com/libs/v2.0.0/library-example-2.0.0.tar.gz

  longhorn_images_tar_archive:
    type: string
    hidden: true
    default: { concat: [{get_input: artifact_base_url}, "/", "longhorn_images.tar.gz"] }
    description: >
      Dependency library that can be downloaded from https://example.domain.com/libs/v2.0.0/library-example-2.0.0.tar.gz

  helm_tar_archive:
    type: string
    hidden: true
    default: { concat: [{get_input: artifact_base_url}, "/", "helm-v3.12.1-linux-amd64.tar.gz"] }
    description: >
      Dependency library that can be downloaded from https://example.domain.com/libs/v2.0.0/library-example-2.0.0.tar.gz

  nfs_subdir_external_provisioner_tar_archive:
    type: string
    hidden: true
    default: { concat: [{get_input: artifact_base_url}, "/", "nfs-subdir-external-provisioner.tar"] }
    description: >
      Dependency library that can be downloaded from https://example.domain.com/libs/v2.0.0/library-example-2.0.0.tar.gz

  nfs_common_packages_tar_archive:
    type: string
    hidden: true
    default: { concat: [{get_input: artifact_base_url}, "/", "nfs_common_packages.tar.gz"] }
    description: >
      Dependency library that can be downloaded from https://example.domain.com/libs/v2.0.0/library-example-2.0.0.tar.gz

  install_nvidia_device_plugin:
    type: boolean
    display_label: Install Nvidia Device Plugin
    description: If true, Nvidia Device Plugin will be installed.
    hidden: false
    allow_update: false
    default: false

  nvidia_image_tar_archive:
    type: string
    hidden: true
    default: { concat: [{get_input: artifact_base_url}, "/", "nvidia_device_plugin.tar.gz"] }
    description: >
      Dependency library that can be downloaded from https://example.domain.com/libs/v2.0.0/library-example-2.0.0.tar.gz
capabilities:

  cluster_endpoint:
    description: The endpoint of K3S cluster
    value: { concat: ["https://", {get_input: node1_public_ip}, ":6443"] }

  cluster_k3s_token:
    description: Secret with token used for adding controlplane and worker nodes to cluster
    value: { get_attribute: ["secrets", "data", "cluster_k3s_token", "key"] }

  kubeconfig_secret_name:
    description: Secret with kubeconfig file of the newly created cluster
    value: { get_attribute: ["secrets", "data", "kubeconfig", "key"] }

  kubernetes_credentials:
    description: Secret with kubernetes credentials of the newly created cluster
    value: { get_attribute: ["secrets", "data", "kubernetes_credentials", "key"] }

  longhorn:
    description: Longhorn endpoint
    value: { get_attribute: ["install_longhorn", "endpoint"] }

  short_term_sc:
    description: Short-term storage class name (local storage)
    value: local-path

  longhorn_long_term_sc:
    description: Longhorn long-term storage class name (1 replica)
    value: { get_attribute: ["install_longhorn", "long_term_longhorn"] }

  nfs_long_term_sc:
    description: NFS long-term storage class name (1 replica)
    value: { get_attribute: ["install_nfs", "long_term_nfs"] }

  node01_ip:
    description: IP of k3s_server
    value: { get_input: node1_ip }

  node01_username:
    description: Username of k3s_server
    value: { get_input: node1_username }

  node01_ssh_key_private:
    description: SSH private key for k3s_server
    value: { get_input: node1_ssh_key_private }

